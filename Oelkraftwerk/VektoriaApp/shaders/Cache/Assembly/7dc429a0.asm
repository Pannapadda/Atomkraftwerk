//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cbPerFrame
// {
//
//   float4x4 g_mView;                  // Offset:    0 Size:    64 [unused]
//   float4x4 g_mViewInv;               // Offset:   64 Size:    64 [unused]
//   float4x4 g_mProjection;            // Offset:  128 Size:    64 [unused]
//   float4x4 g_mProjectionInv;         // Offset:  192 Size:    64
//   float4x4 g_mProjectionInvViewport; // Offset:  256 Size:    64 [unused]
//   float4 g_f4AmbientColorUp;         // Offset:  320 Size:    16
//   float4 g_f4AmbientColorDown;       // Offset:  336 Size:    16
//   float3 g_f3CameraPos;              // Offset:  352 Size:    12
//   float g_fAlphaTest;                // Offset:  364 Size:     4 [unused]
//   uint g_uNumLights;                 // Offset:  368 Size:     4 [unused]
//   uint g_uNumSpotLights;             // Offset:  372 Size:     4 [unused]
//   uint g_uWindowWidth;               // Offset:  376 Size:     4 [unused]
//   uint g_uWindowHeight;              // Offset:  380 Size:     4 [unused]
//   uint g_uMaxNumLightsPerTile;       // Offset:  384 Size:     4
//   uint g_uMaxNumElementsPerTile;     // Offset:  388 Size:     4
//   uint g_uNumTilesX;                 // Offset:  392 Size:     4
//   uint g_uNumTilesY;                 // Offset:  396 Size:     4 [unused]
//   uint g_uMaxVPLs;                   // Offset:  400 Size:     4 [unused]
//   uint g_uMaxNumVPLsPerTile;         // Offset:  404 Size:     4
//   uint g_uMaxNumVPLElementsPerTile;  // Offset:  408 Size:     4
//   float g_fVPLSpotStrength;          // Offset:  412 Size:     4 [unused]
//   float g_fVPLSpotRadius;            // Offset:  416 Size:     4 [unused]
//   float g_fVPLPointStrength;         // Offset:  420 Size:     4 [unused]
//   float g_fVPLPointRadius;           // Offset:  424 Size:     4 [unused]
//   float g_fVPLRemoveBackFaceContrib; // Offset:  428 Size:     4
//   float g_fVPLColorThreshold;        // Offset:  432 Size:     4 [unused]
//   float g_fVPLBrightnessThreshold;   // Offset:  436 Size:     4 [unused]
//   float g_fPerFramePad1;             // Offset:  440 Size:     4 [unused]
//   float g_fPerFramePad2;             // Offset:  444 Size:     4 [unused]
//
// }
//
// cbuffer TexInfo
// {
//
//   float4 f4ColorAmbient;             // Offset:    0 Size:    16 [unused]
//   float fA;                          // Offset:   16 Size:     4 [unused]
//   float fH;                          // Offset:   20 Size:     4
//   float fBumpStrength;               // Offset:   24 Size:     4
//   float frTransparency;              // Offset:   28 Size:     4 [unused]
//   float4 f4ColorSSS;                 // Offset:   32 Size:    16
//   float4 f4SSSBRDFParams;            // Offset:   48 Size:    16
//   uint uImage;                       // Offset:   64 Size:     4 [unused]
//   uint uGlow;                        // Offset:   68 Size:     4
//   uint uSpecular;                    // Offset:   72 Size:     4
//   uint uBump;                        // Offset:   76 Size:     4
//   uint uImageBlack;                  // Offset:   80 Size:     4 [unused]
//   uint uGlowAsImage;                 // Offset:   84 Size:     4
//   uint uSpecularAsImage;             // Offset:   88 Size:     4 [unused]
//   uint uHeightAsImage;               // Offset:   92 Size:     4 [unused]
//   uint uImageWhite;                  // Offset:   96 Size:     4 [unused]
//   uint uGlowWhite;                   // Offset:  100 Size:     4 [unused]
//   uint uSpecularWhite;               // Offset:  104 Size:     4
//   uint uHeight;                      // Offset:  108 Size:     4 [unused]
//   uint uShadingOn;                   // Offset:  112 Size:     4
//   uint uGlowAsAmbient;               // Offset:  116 Size:     4
//   uint uChromaKeying;                // Offset:  120 Size:     4 [unused]
//   uint uEnvironment;                 // Offset:  124 Size:     4
//   uint uPOM;                         // Offset:  128 Size:     4
//   uint uTexBRDF;                     // Offset:  132 Size:     4 [unused]
//   uint uTexSSS;                      // Offset:  136 Size:     4
//   uint uReflectionMap;               // Offset:  140 Size:     4
//   uint uixPos;                       // Offset:  144 Size:     4
//   uint uiyPos;                       // Offset:  148 Size:     4
//   uint uixPics;                      // Offset:  152 Size:     4
//   uint uiyPics;                      // Offset:  156 Size:     4
//   float fSpecularRoughness;          // Offset:  160 Size:     4
//   float fSpecularIOR;                // Offset:  164 Size:     4
//   uint uPad1;                        // Offset:  168 Size:     4 [unused]
//   uint uPad2;                        // Offset:  172 Size:     4 [unused]
//
// }
//
// cbuffer ViewportArt
// {
//
//   float4 f4ColorViewportOutline;     // Offset:    0 Size:    16
//   float4 f4FogParams;                // Offset:   16 Size:    16
//   float4x4 mColorModification;       // Offset:   32 Size:    64
//   uint uStyleColor;                  // Offset:   96 Size:     4
//   uint uStyleHalfTransparent;        // Offset:  100 Size:     4
//   uint uStylePopart;                 // Offset:  104 Size:     4 [unused]
//   uint uStyleOutlining;              // Offset:  108 Size:     4
//   uint uStyleMonochrome;             // Offset:  112 Size:     4 [unused]
//   uint uStyleOwn;                    // Offset:  116 Size:     4 [unused]
//   uint uStyleFog;                    // Offset:  120 Size:     4
//   uint uPad0;                        // Offset:  124 Size:     4 [unused]
//
// }
//
// Resource bind info for g_VPLCenterAndRadiusBuffer
// {
//
//   float4 $Element;                   // Offset:    0 Size:    16
//
// }
//
// Resource bind info for g_VPLDataBuffer
// {
//
//   struct SVPLData
//   {
//       
//       float4 f4Direction;            // Offset:    0
//       float4 f4Color;                // Offset:   16
//       float4 f4SourceLightDirection; // Offset:   32
//
//   } $Element;                        // Offset:    0 Size:    48
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_Sampler                         sampler      NA          NA    0        1
// g_pointLightCenterAndRadiusBuffer    texture  float4         buf    2        1
// g_pointLightColorBuffer           texture  float4         buf    3        1
// g_perTilePointLightIndexBuffer    texture    uint         buf    4        1
// g_spotLightCenterAndRadiusBuffer    texture  float4         buf    5        1
// g_spotLightColorBuffer            texture  float4         buf    6        1
// g_spotLightSpotParamsBuffer       texture  float4         buf    7        1
// g_perTileSpotLightIndexBuffer     texture    uint         buf    8        1
// g_VPLCenterAndRadiusBuffer        texture  struct         r/o    9        1
// g_VPLDataBuffer                   texture  struct         r/o   10        1
// g_perTileVPLIndexBuffer           texture    uint         buf   11        1
// tex2D[0]                          texture  float4          2d   15        1
// tex2D[1]                          texture  float4          2d   16        1
// tex2D[3]                          texture  float4          2d   18        1
// tex2D[4]                          texture  float4          2d   19        1
// tex2D[5]                          texture  float4          2d   20        1
// tex2D[6]                          texture  float4          2d   21        1
// cbPerFrame                        cbuffer      NA          NA    2        1
// TexInfo                           cbuffer      NA          NA    5        1
// ViewportArt                       cbuffer      NA          NA    6        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_POSITION              0   xyzw        0      POS  float   xyz 
// NORMAL                   0   xyz         1     NONE  float   xyz 
// TANGENT                  0   xyz         2     NONE  float   xyz 
// BITANGENT                0   xyz         3     NONE  float   xyz 
// TEXCOORD                 0   xy          4     NONE  float   xy  
// TEXCOORD                 1   xyz         5     NONE  float   xyz 
// TEXCOORD                 2   xyzw        6     NONE  float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_TARGET                0   xyzw        0   TARGET  float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[27], immediateIndexed
dcl_constantbuffer cb5[11], immediateIndexed
dcl_constantbuffer cb6[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_buffer (float,float,float,float) t2
dcl_resource_buffer (float,float,float,float) t3
dcl_resource_buffer (uint,uint,uint,uint) t4
dcl_resource_buffer (float,float,float,float) t5
dcl_resource_buffer (float,float,float,float) t6
dcl_resource_buffer (float,float,float,float) t7
dcl_resource_buffer (uint,uint,uint,uint) t8
dcl_resource_structured t9, 16 
dcl_resource_structured t10, 48 
dcl_resource_buffer (uint,uint,uint,uint) t11
dcl_resource_texture2d (float,float,float,float) t15
dcl_resource_texture2d (float,float,float,float) t16
dcl_resource_texture2d (float,float,float,float) t18
dcl_resource_texture2d (float,float,float,float) t19
dcl_resource_texture2d (float,float,float,float) t20
dcl_resource_texture2d (float,float,float,float) t21
dcl_input_ps_siv linear noperspective v0.xyz, position
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xy
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xyzw
dcl_output o0.xyzw
dcl_temps 23
ult r0.xy, l(1, 1, 0, 0), cb5[9].ywyy
or r0.x, r0.y, r0.x
utof r1.xyzw, cb5[9].xyzw
div r0.yz, r1.xxyx, r1.zzwz
div r1.xy, l(1.000000, 1.000000, 1.000000, 1.000000), r1.zwzz
mad r0.yz, v4.xxyx, r1.xxyx, r0.yyzy
movc r0.xy, r0.xxxx, r0.yzyy, v4.xyxx
div r1.xyz, v6.xyzx, v6.wwww
dp3 r0.w, v1.xyzx, v1.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, v1.xyzx
mul r3.xyz, r2.yzxy, l(0.000000, 0.000000, 1.000000, 0.000000)
mad r4.xyz, r2.yzxy, l(1.000000, 0.000000, 0.000000, 0.000000), -r3.yzxy
mad r3.xyz, -r2.zxyz, l(1.000000, 0.000000, 0.000000, 0.000000), r3.xyzx
dp2 r0.w, r4.xyxx, r4.xyxx
sqrt r1.w, r0.w
dp2 r2.w, r3.xzxx, r3.xzxx
sqrt r3.w, r2.w
lt r1.w, r3.w, r1.w
if_nz r1.w
  rsq r0.w, r0.w
  mul r4.xyz, r0.wwww, r4.xyzx
else 
  rsq r0.w, r2.w
  mul r4.xyz, r0.wwww, r3.xyzx
endif 
mul r3.xyz, r2.zxyz, r4.yzxy
mad r3.xyz, r2.yzxy, r4.zxyz, -r3.xyzx
dp3 r0.w, -r3.xyzx, -r3.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, -r3.xyzx
ieq r5.xy, cb5[8].xxxx, l(1, 2, 0, 0)
if_nz r5.x
  add r5.xzw, v5.xxyz, -v6.xxyz
  dp3 r0.w, r5.xzwx, r5.xzwx
  rsq r0.w, r0.w
  mul r5.xzw, r0.wwww, r5.xxzw
  dp3 r6.x, -r5.xzwx, r4.xyzx
  dp3 r6.y, -r5.xzwx, r3.xyzx
  dp3 r0.w, -r5.xzwx, r2.xyzx
  mul r5.xz, r6.xxyx, l(-0.020000, 0.000000, -0.020000, 0.000000)
  div r5.xz, r5.xxzx, r0.wwww
  mad r0.w, r0.w, l(-15.000000), l(20.000000)
  ftoi r1.w, r0.w
  round_z r0.w, r0.w
  div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
  mul r6.xy, r0.wwww, r5.xzxx
  deriv_rtx_coarse r6.zw, r0.xxxy
  deriv_rty_coarse r7.xy, r0.xyxx
  add r2.w, -r0.w, l(1.000000)
  iadd r8.x, r1.w, l(1)
  mov r7.zw, l(0,0,0,0)
  mov r9.xyzw, l(0,0,0,0)
  mov r10.y, r2.w
  mov r10.xzw, l(0,0,1.000000,0)
  loop 
    ige r1.w, r10.x, r8.x
    breakc_nz r1.w
    add r11.xy, r0.xyxx, r7.zwzz
    sample_d_indexable(texture2d)(float,float,float,float) r1.w, r11.xyxx, t20.yzwx, s0, r6.zwzz, r7.xyxx
    add r1.w, r1.w, r10.w
    mul r11.w, r1.w, l(0.500000)
    lt r3.w, r10.y, r11.w
    add r4.w, -r10.z, r10.w
    mad r1.w, -r1.w, l(0.500000), r10.w
    add r1.w, r10.y, r1.w
    add r1.w, -r10.z, r1.w
    div r1.w, r4.w, r1.w
    mad r12.xy, r1.wwww, r6.xyxx, r9.xyxx
    iadd r11.x, r10.x, l(1)
    mad r12.zw, r5.xxxz, r0.wwww, r7.zzzw
    add r11.y, -r0.w, r10.y
    movc r12.zw, r3.wwww, r7.zzzw, r12.zzzw
    movc r9.xy, r3.wwww, r9.xyxx, r7.zwzz
    movc r9.zw, r3.wwww, r12.xxxy, r9.zzzw
    mov r8.yzw, r10.yyzw
    mov r11.z, r8.y
    movc r10.xyzw, r3.wwww, r8.xyzw, r11.xyzw
    mov r7.zw, r12.zzzw
  endloop 
  add r0.xy, r0.xyxx, r9.zwzz
  sample_indexable(texture2d)(float,float,float,float) r0.w, r0.xyxx, t20.xzwy, s0
  mul r5.xzw, r3.xxyz, r0.wwww
  mad r5.xzw, r0.wwww, r4.xxyz, r5.xxzw
  add r5.xzw, r5.xxzw, v1.xxyz
  dp3 r0.w, r5.xzwx, r5.xzwx
  rsq r0.w, r0.w
  mul r5.xzw, r0.wwww, r5.xxzw
else 
  mov r5.xzw, v1.xxyz
endif 
if_nz r5.y
  add r6.xyz, v5.xyzx, -v6.xyzx
  dp3 r0.w, r6.xyzx, r6.xyzx
  rsq r0.w, r0.w
  mul r6.xyz, r0.wwww, r6.xyzx
  dp3 r7.x, r6.xyzx, r4.xyzx
  dp3 r7.y, r6.xyzx, v3.xyzx
  dp3 r7.z, r6.xyzx, r2.xyzx
  dp3 r0.w, r7.xyzx, r7.xyzx
  rsq r0.w, r0.w
  mul r2.xyz, r0.wwww, r7.xyzx
  div r2.xyz, r2.xyzx, r2.zzzz
  sample_indexable(texture2d)(float,float,float,float) r6.xy, r0.xyxx, t20.wzxy, s0
  mov_sat r6.x, r6.x
  mul r0.w, r6.x, r6.y
  add r1.w, r6.y, l(1.000000)
  div r0.w, r0.w, r1.w
  mul r0.w, r0.w, l(0.010000)
  mov r0.z, l(0)
  mad r6.xyz, r2.xyzx, r0.wwww, r0.xyzx
  sample_indexable(texture2d)(float,float,float,float) r7.xy, r6.xyxx, t20.zwxy, s0
  add_sat r0.w, -r6.z, r7.y
  mul r0.w, r0.w, r7.x
  add r1.w, r7.x, l(1.000000)
  div r0.w, r0.w, r1.w
  mul r0.w, r0.w, l(0.010000)
  mad r6.xyz, r2.xyzx, r0.wwww, r6.xyzx
  sample_indexable(texture2d)(float,float,float,float) r7.xy, r6.xyxx, t20.zwxy, s0
  add_sat r0.w, -r6.z, r7.y
  mul r0.w, r0.w, r7.x
  add r1.w, r7.x, l(1.000000)
  div r0.w, r0.w, r1.w
  mul r0.w, r0.w, l(0.010000)
  mad r6.xyz, r2.xyzx, r0.wwww, r6.xyzx
  sample_indexable(texture2d)(float,float,float,float) r7.xy, r6.xyxx, t20.zwxy, s0
  add_sat r0.w, -r6.z, r7.y
  mul r0.w, r0.w, r7.x
  add r1.w, r7.x, l(1.000000)
  div r0.w, r0.w, r1.w
  mul r0.w, r0.w, l(0.010000)
  mad r6.xyz, r2.xyzx, r0.wwww, r6.xyzx
  sample_indexable(texture2d)(float,float,float,float) r7.xy, r6.xyxx, t20.zwxy, s0
  add_sat r0.w, -r6.z, r7.y
  mul r0.w, r0.w, r7.x
  add r1.w, r7.x, l(1.000000)
  div r0.w, r0.w, r1.w
  mul r0.w, r0.w, l(0.010000)
  mad r6.xyz, r2.xyzx, r0.wwww, r6.xyzx
  sample_indexable(texture2d)(float,float,float,float) r7.xy, r6.xyxx, t20.zwxy, s0
  add_sat r0.w, -r6.z, r7.y
  mul r0.w, r0.w, r7.x
  add r1.w, r7.x, l(1.000000)
  div r0.w, r0.w, r1.w
  mul r0.w, r0.w, l(0.010000)
  mad r6.xyz, r2.xyzx, r0.wwww, r6.xyzx
  sample_indexable(texture2d)(float,float,float,float) r7.xy, r6.xyxx, t20.zwxy, s0
  add_sat r0.w, -r6.z, r7.y
  mul r0.w, r0.w, r7.x
  add r1.w, r7.x, l(1.000000)
  div r0.w, r0.w, r1.w
  mul r0.w, r0.w, l(0.010000)
  mad r6.xyz, r2.xyzx, r0.wwww, r6.xyzx
  sample_indexable(texture2d)(float,float,float,float) r7.xy, r6.xyxx, t20.zwxy, s0
  add_sat r0.w, -r6.z, r7.y
  mul r0.w, r0.w, r7.x
  add r1.w, r7.x, l(1.000000)
  div r0.w, r0.w, r1.w
  mul r0.w, r0.w, l(0.010000)
  mad r6.xyz, r2.xyzx, r0.wwww, r6.xyzx
  sample_indexable(texture2d)(float,float,float,float) r7.xy, r6.xyxx, t20.zwxy, s0
  add_sat r0.w, -r6.z, r7.y
  mul r0.w, r0.w, r7.x
  add r1.w, r7.x, l(1.000000)
  div r0.w, r0.w, r1.w
  mul r0.w, r0.w, l(0.010000)
  mad r6.xyz, r2.xyzx, r0.wwww, r6.xyzx
  sample_indexable(texture2d)(float,float,float,float) r7.xy, r6.xyxx, t20.zwxy, s0
  add_sat r0.w, -r6.z, r7.y
  mul r0.w, r0.w, r7.x
  add r1.w, r7.x, l(1.000000)
  div r0.w, r0.w, r1.w
  mul r0.w, r0.w, l(0.010000)
  mad r6.xyz, r2.xyzx, r0.wwww, r6.xyzx
  sample_indexable(texture2d)(float,float,float,float) r7.xy, r6.xyxx, t20.zwxy, s0
  add_sat r0.w, -r6.z, r7.y
  mul r0.w, r0.w, r7.x
  add r1.w, r7.x, l(1.000000)
  div r0.w, r0.w, r1.w
  mul r0.w, r0.w, l(0.010000)
  mad r6.xyz, r2.xyzx, r0.wwww, r6.xyzx
  sample_indexable(texture2d)(float,float,float,float) r7.xy, r6.xyxx, t20.zwxy, s0
  add_sat r0.w, -r6.z, r7.y
  mul r0.w, r0.w, r7.x
  add r1.w, r7.x, l(1.000000)
  div r0.w, r0.w, r1.w
  mul r0.w, r0.w, l(0.010000)
  mad r6.xyz, r2.xyzx, r0.wwww, r6.xyzx
  sample_indexable(texture2d)(float,float,float,float) r7.xy, r6.xyxx, t20.zwxy, s0
  add_sat r0.w, -r6.z, r7.y
  mul r0.w, r0.w, r7.x
  add r1.w, r7.x, l(1.000000)
  div r0.w, r0.w, r1.w
  mul r0.w, r0.w, l(0.010000)
  mad r6.xyz, r2.xyzx, r0.wwww, r6.xyzx
  sample_indexable(texture2d)(float,float,float,float) r7.xy, r6.xyxx, t20.zwxy, s0
  add_sat r0.w, -r6.z, r7.y
  mul r0.w, r0.w, r7.x
  add r1.w, r7.x, l(1.000000)
  div r0.w, r0.w, r1.w
  mul r0.w, r0.w, l(0.010000)
  mad r6.xyz, r2.xyzx, r0.wwww, r6.xyzx
  sample_indexable(texture2d)(float,float,float,float) r6.xy, r6.xyxx, t20.zwxy, s0
  add_sat r0.w, -r6.z, r6.y
  mul r0.w, r0.w, r6.x
  add r1.w, r6.x, l(1.000000)
  div r0.w, r0.w, r1.w
  mul r0.w, r2.z, r0.w
  mad r0.w, r0.w, l(0.010000), r6.z
  mul r2.xyz, r2.xyzx, r0.wwww
  mad r6.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r0.xyzx
  sample_indexable(texture2d)(float,float,float,float) r0.z, r6.xyxx, t20.xywz, s0
  lt r0.z, r6.z, r0.z
  if_nz r0.z
    mad r7.xyz, r2.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000), r6.xyzx
  else 
    mad r7.xyz, -r2.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000), r6.xyzx
  endif 
  sample_indexable(texture2d)(float,float,float,float) r0.z, r7.xyxx, t20.xywz, s0
  lt r0.z, r7.z, r0.z
  if_nz r0.z
    mad r6.xyz, r2.xyzx, l(0.125000, 0.125000, 0.125000, 0.000000), r7.xyzx
  else 
    mad r6.xyz, -r2.xyzx, l(0.125000, 0.125000, 0.125000, 0.000000), r7.xyzx
  endif 
  sample_indexable(texture2d)(float,float,float,float) r0.z, r6.xyxx, t20.xywz, s0
  lt r0.z, r6.z, r0.z
  if_nz r0.z
    mad r7.xyz, r2.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000), r6.xyzx
  else 
    mad r7.xyz, -r2.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000), r6.xyzx
  endif 
  sample_indexable(texture2d)(float,float,float,float) r0.z, r7.xyxx, t20.xywz, s0
  lt r0.z, r7.z, r0.z
  if_nz r0.z
    mad r6.xyz, r2.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r7.xyzx
  else 
    mad r6.xyz, -r2.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r7.xyzx
  endif 
  sample_indexable(texture2d)(float,float,float,float) r0.z, r6.xyxx, t20.xywz, s0
  lt r0.z, r6.z, r0.z
  if_nz r0.z
    mad r7.xyz, r2.xyzx, l(0.015625, 0.015625, 0.015625, 0.000000), r6.xyzx
  else 
    mad r7.xyz, -r2.xyzx, l(0.015625, 0.015625, 0.015625, 0.000000), r6.xyzx
  endif 
  sample_indexable(texture2d)(float,float,float,float) r0.z, r7.xyxx, t20.xywz, s0
  lt r0.z, r7.z, r0.z
  if_nz r0.z
    mad r0.xy, r2.xyxx, l(0.007813, 0.007813, 0.000000, 0.000000), r7.xyxx
  else 
    mad r0.xy, -r2.xyxx, l(0.007813, 0.007813, 0.000000, 0.000000), r7.xyxx
  endif 
  sample_indexable(texture2d)(float,float,float,float) r0.z, r0.xyxx, t20.xywz, s0
  mul r2.xyz, r3.xyzx, r0.zzzz
  mad r2.xyz, r0.zzzz, r4.xyzx, r2.xyzx
  add r2.xyz, r2.xyzx, r5.xzwx
  dp3 r0.z, r2.xyzx, r2.xyzx
  rsq r0.z, r0.z
  mul r5.xzw, r0.zzzz, r2.xxyz
endif 
sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.xyxx, t15.xyzw, s0
if_nz cb5[4].w
  sample_indexable(texture2d)(float,float,float,float) r0.zw, r0.xyxx, t18.zwxy, s0
  mad r0.zw, r0.zzzw, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
  mul r0.zw, r0.zzzw, cb5[1].zzzz
  mul r3.xyz, -r0.wwww, v3.xyzx
  mad r3.xyz, r0.zzzz, v2.xyzx, r3.xyzx
  add r3.xyz, r3.xyzx, r5.xzwx
  dp3 r0.z, r3.xyzx, r3.xyzx
  rsq r0.z, r0.z
  mul r5.xzw, r0.zzzz, r3.xxyz
endif 
add r3.xyz, -r1.xyzx, cb2[22].xyzx
dp3 r0.z, r3.xyzx, r3.xyzx
rsq r0.z, r0.z
mul r4.xyz, r0.zzzz, r3.xyzx
if_nz cb5[4].z
  mov r6.xyz, r2.xyzx
else 
  mov r6.xyz, l(0,0,0,0)
endif 
mad r0.w, r5.z, l(0.500000), l(0.500000)
add r1.w, -r0.w, l(1.000000)
mul r7.xyz, r1.wwww, cb2[21].xyzx
mad r7.xyz, cb2[20].xyzx, r0.wwww, r7.xyzx
mul r8.xy, v0.xyxx, l(0.031250, 0.031250, 0.000000, 0.000000)
round_ni r8.xy, r8.xyxx
utof r0.w, cb2[24].z
mad r0.w, r8.y, r0.w, r8.x
ftou r0.w, r0.w
imul null, r1.w, cb2[24].y, r0.w
ld_indexable(buffer)(uint,uint,uint,uint) r3.w, r1.wwww, t4.yzwx
imad r8.xyzw, cb2[24].yyyy, r0.wwww, l(1, 4, 2, 3)
ld_indexable(buffer)(uint,uint,uint,uint) r4.w, r8.xxxx, t4.yzwx
ishl r3.w, r3.w, l(16)
or r3.w, r4.w, r3.w
mad r4.w, v0.z, cb2[15].z, cb2[15].w
div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
lt r3.w, r4.w, r3.w
iadd r5.y, r8.y, cb2[24].x
movc r6.w, r3.w, r8.y, r5.y
ld_indexable(buffer)(uint,uint,uint,uint) r7.w, r8.zzzz, t4.yzwx
ld_indexable(buffer)(uint,uint,uint,uint) r9.x, r8.wwww, t4.xyzw
movc r3.w, r3.w, r7.w, r9.x
iadd r3.w, r6.w, r3.w
dp3 r7.w, r5.xzwx, r5.xzwx
rsq r7.w, r7.w
mul r9.xyz, r5.xzwx, r7.wwww
mul r7.w, cb5[10].x, cb5[10].x
dp3_sat r9.w, r9.xyzx, r4.xyzx
mul r10.x, r7.w, r7.w
mad r10.y, r7.w, r7.w, l(-1.000000)
add r10.z, l(1.000000), -cb5[10].y
mul r10.w, r7.w, l(0.500000)
mad r7.w, -r7.w, l(0.500000), l(1.000000)
mad r9.w, r9.w, r7.w, r10.w
div r9.w, l(1.000000, 1.000000, 1.000000, 1.000000), r9.w
sample_indexable(texture2d)(float,float,float,float) r11.xyz, r0.xyxx, t21.xyzw, s0
add r12.xyz, r2.xyzx, r2.xyzx
dp3 r11.x, r11.xyzx, r11.xyzx
sqrt r11.x, r11.x
add r11.yzw, v5.xxyz, -v6.xxyz
dp3 r12.w, r11.yzwy, r11.yzwy
rsq r13.x, r12.w
mul r13.yzw, r11.yyzw, r13.xxxx
dp3 r14.x, -r13.yzwy, r5.xzwx
mad r14.y, r14.x, l(0.500000), l(0.500000)
dp3 r14.z, -r5.xzwx, -r13.yzwy
max r14.xz, r14.xxzx, l(0.000000, 0.000000, 0.000000, 0.000000)
dp3 r14.w, -r13.yzwy, -r13.yzwy
mad r14.w, r14.w, l(0.500000), l(0.500000)
mul r14.w, r14.w, cb5[3].x
mad r14.z, cb5[3].x, r14.z, r14.w
dp3 r13.w, r5.xzwx, r13.yzwy
max r14.w, r13.w, l(0.000000)
add r15.x, -r14.w, l(1.000000)
mul r15.x, r15.x, r15.x
mad r11.yzw, -r11.yyzw, r13.xxxx, r5.xxzw
dp3 r13.x, r11.yzwy, r11.yzwy
rsq r13.x, r13.x
mul r11.yzw, r11.yyzw, r13.xxxx
dp3_sat r11.y, r5.xzwx, r11.yzwy
lt r11.z, r14.w, l(0.800000)
lt r11.w, l(2.000000), cb5[3].x
and r11.z, r11.w, r11.z
mov r16.w, l(1.000000)
mov r15.yzw, l(0,0,0,0)
mov r17.xyz, l(0,0,0,0)
mov r11.w, r6.w
loop 
  uge r13.x, r11.w, r3.w
  breakc_nz r13.x
  ld_indexable(buffer)(uint,uint,uint,uint) r13.x, r11.wwww, t4.xyzw
  ld_indexable(buffer)(float,float,float,float) r18.xyzw, r13.xxxx, t2.xyzw
  add r19.xyz, -r1.xyzx, r18.xyzx
  dp3 r17.w, r19.xyzx, r19.xyzx
  sqrt r19.w, r17.w
  lt r20.x, r19.w, r18.w
  if_nz r20.x
    rsq r20.x, r17.w
    mul r20.xyz, r19.xyzx, r20.xxxx
    div r19.w, r19.w, r18.w
    mul r19.w, r19.w, r19.w
    mad r19.w, -r19.w, r19.w, l(1.000000)
    mul r19.w, r19.w, r19.w
    min r19.w, r19.w, l(1.000000)
    mul r18.w, r18.w, r19.w
    add r17.w, r17.w, l(1.000000)
    div r17.w, r18.w, r17.w
    ld_indexable(buffer)(float,float,float,float) r21.xyz, r13.xxxx, t3.xyzw
    dp3_sat r18.w, r20.xyzx, r5.xzwx
    mul r20.xyz, r18.wwww, r21.xyzx
    mul r20.xyz, r17.wwww, r20.xyzx
    mul r20.xyz, r20.xyzx, cb5[1].yyyy
    mad r22.xyz, r3.xyzx, r0.zzzz, r19.xyzx
    dp3 r18.w, r22.xyzx, r22.xyzx
    rsq r18.w, r18.w
    mul r22.xyz, r18.wwww, r22.xyzx
    dp3_sat r18.w, r9.xyzx, r19.xyzx
    dp3_sat r19.w, r9.xyzx, r22.xyzx
    dp3_sat r19.x, r19.xyzx, r22.xyzx
    mul r19.y, r19.w, r19.w
    mad r19.y, r19.y, r10.y, l(1.000000)
    mul r19.y, r19.y, r19.y
    mul r19.y, r19.y, l(3.141590)
    div r19.y, r10.x, r19.y
    add r19.x, -r19.x, l(1.000000)
    mul r19.z, r19.x, r19.x
    mul r19.z, r19.z, r19.z
    mul r19.x, r19.z, r19.x
    mad r19.x, r10.z, r19.x, cb5[10].y
    mad r19.z, r18.w, r7.w, r10.w
    div r19.z, l(1.000000, 1.000000, 1.000000, 1.000000), r19.z
    mul r19.z, r9.w, r19.z
    mul r18.w, r18.w, r19.y
    mul r18.w, r19.x, r18.w
    mul r18.w, r19.z, r18.w
    mul r19.xyz, r18.wwww, r21.xyzx
    mul r19.xyz, r17.wwww, r19.xyzx
    if_nz cb5[6].z
      mul r21.xyz, r20.xyzx, r19.xyzx
      add r21.xyz, r21.xyzx, r21.xyzx
    else 
      mul r19.xyz, r20.xyzx, r19.xyzx
      mul r21.xyz, r12.xyzx, r19.xyzx
    endif 
    mul r19.xyz, r20.xyzx, l(16.000000, 16.000000, 16.000000, 0.000000)
    mul r20.xyz, r21.xyzx, l(16.000000, 16.000000, 16.000000, 0.000000)
  else 
    mov r19.xyz, l(0,0,0,0)
    mov r20.xyz, l(0,0,0,0)
  endif 
  if_nz cb5[8].z
    mov r16.xyz, r18.xyzx
    add r18.xyzw, r16.xyzw, -v6.xyzw
    dp4 r16.x, r18.xyzw, r18.xyzw
    sqrt r16.x, r16.x
    div r16.x, l(1.000000, 1.000000, 1.000000, 1.000000), r16.x
    mul r16.x, r16.x, l(10.000000)
    mul r16.y, r14.z, r16.x
    mul r18.xyz, r16.yyyy, cb5[2].xyzx
    mul r18.xyz, r11.xxxx, r18.xyzx
    if_nz r11.z
      mul r21.xyz, r18.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000)
      mul r19.xyz, r19.xyzx, r21.xyzx
      mul r20.xyz, r20.xyzx, r21.xyzx
    else 
      ld_indexable(buffer)(float,float,float,float) r21.xyz, r13.xxxx, t3.xyzw
      mul r13.x, r14.y, r16.x
      mul r22.xyz, r14.xxxx, r20.xyzx
      mul r22.xyz, r15.xxxx, r22.xyzx
      mad r18.xyz, r13.xxxx, r2.xyzx, r18.xyzx
      mul r22.xyz, r22.xyzx, cb5[3].zzzz
      mad r18.xyz, r22.xyzx, r16.xxxx, r18.xyzx
      mul r13.x, r11.y, r16.x
      mul r16.xyz, r20.xyzx, r13.xxxx
      mad r16.xyz, r16.xyzx, l(0.050000, 0.050000, 0.050000, 0.000000), r18.xyzx
      mul r16.xyz, r21.xyzx, r16.xyzx
      mul r19.xyz, r16.xyzx, r19.xyzx
      mul r20.xyz, r16.xyzx, r20.xyzx
    endif 
  endif 
  add r15.yzw, r15.yyzw, r19.xxyz
  add r17.xyz, r17.xyzx, r20.xyzx
  iadd r11.w, r11.w, l(1)
endloop 
ld_indexable(buffer)(uint,uint,uint,uint) r1.w, r1.wwww, t8.yzwx
ld_indexable(buffer)(uint,uint,uint,uint) r3.w, r8.xxxx, t8.yzwx
ishl r1.w, r1.w, l(16)
or r1.w, r3.w, r1.w
lt r1.w, r4.w, r1.w
movc r3.w, r1.w, r8.y, r5.y
ld_indexable(buffer)(uint,uint,uint,uint) r5.y, r8.zzzz, t8.yxzw
ld_indexable(buffer)(uint,uint,uint,uint) r6.w, r8.wwww, t8.yzwx
movc r1.w, r1.w, r5.y, r6.w
iadd r1.w, r3.w, r1.w
dp3_sat r4.x, r9.xyzx, -r4.xyzx
mad r4.x, r4.x, r7.w, r10.w
div r4.x, l(1.000000, 1.000000, 1.000000, 1.000000), r4.x
add r6.xyz, r6.xyzx, r6.xyzx
mov r8.w, l(1.000000)
mov r12.xyz, r15.yzwy
mov r16.xyz, r17.xyzx
mov r4.y, r3.w
loop 
  uge r4.z, r4.y, r1.w
  breakc_nz r4.z
  ld_indexable(buffer)(uint,uint,uint,uint) r4.z, r4.yyyy, t8.yzxw
  ld_indexable(buffer)(float,float,float,float) r18.xyzw, r4.zzzz, t5.xyzw
  ld_indexable(buffer)(float,float,float,float) r19.xyzw, r4.zzzz, t7.xyzw
  mad r5.y, -r19.x, r19.x, l(1.000000)
  mad r5.y, -r19.y, r19.y, r5.y
  sqrt r5.y, r5.y
  lt r6.w, l(0.000000), r19.z
  movc r20.z, r6.w, r5.y, -r5.y
  mov r20.xy, r19.xyxx
  mad r21.xyz, -r18.wwww, r20.xyzx, r18.xyzx
  add r21.xyz, -r1.xyzx, r21.xyzx
  dp3 r5.y, r21.xyzx, r21.xyzx
  rsq r9.w, r5.y
  mul r22.xyz, r9.wwww, r21.xyzx
  sqrt r9.w, r5.y
  dp3 r11.w, -r22.xyzx, r20.xyzx
  movc r6.w, r6.w, r19.z, -r19.z
  lt r13.x, r9.w, r19.w
  lt r16.w, r6.w, r11.w
  and r13.x, r13.x, r16.w
  if_nz r13.x
    add r6.w, -r6.w, r11.w
    add r11.w, -r11.w, l(1.000000)
    div r6.w, r6.w, r11.w
    mul r6.w, r6.w, r6.w
    min r6.w, r6.w, l(1.000000)
    div r9.w, r9.w, r19.w
    mul r9.w, r9.w, r9.w
    mad r9.w, -r9.w, r9.w, l(1.000000)
    mul r9.w, r9.w, r9.w
    min r9.w, r9.w, l(1.000000)
    mul r9.w, r9.w, r19.w
    add r5.y, r5.y, l(1.000000)
    div r5.y, r9.w, r5.y
    ld_indexable(buffer)(float,float,float,float) r19.xyz, r4.zzzz, t6.xyzw
    dp3_sat r9.w, r22.xyzx, r5.xzwx
    mul r20.xyz, r9.wwww, r19.xyzx
    mul r20.xyz, r5.yyyy, r20.xyzx
    mul r20.xyz, r6.wwww, r20.xyzx
    mul r20.xyz, r20.xyzx, cb5[1].yyyy
    mad r22.xyz, -r3.xyzx, r0.zzzz, r21.xyzx
    dp3 r9.w, r22.xyzx, r22.xyzx
    rsq r9.w, r9.w
    mul r22.xyz, r9.wwww, r22.xyzx
    dp3_sat r9.w, r9.xyzx, r21.xyzx
    dp3_sat r11.w, r9.xyzx, r22.xyzx
    dp3_sat r13.x, r21.xyzx, r22.xyzx
    mul r11.w, r11.w, r11.w
    mad r11.w, r11.w, r10.y, l(1.000000)
    mul r11.w, r11.w, r11.w
    mul r11.w, r11.w, l(3.141590)
    div r11.w, r10.x, r11.w
    add r13.x, -r13.x, l(1.000000)
    mul r16.w, r13.x, r13.x
    mul r16.w, r16.w, r16.w
    mul r13.x, r13.x, r16.w
    mad r13.x, r10.z, r13.x, cb5[10].y
    mad r16.w, r9.w, r7.w, r10.w
    div r16.w, l(1.000000, 1.000000, 1.000000, 1.000000), r16.w
    mul r16.w, r4.x, r16.w
    mul r9.w, r9.w, r11.w
    mul r9.w, r13.x, r9.w
    mul r9.w, r16.w, r9.w
    mul r19.xyz, r9.wwww, r19.xyzx
    mul r19.xyz, r5.yyyy, r19.xyzx
    mul r19.xyz, r6.wwww, r19.xyzx
    if_nz cb5[6].z
      mul r21.xyz, r20.xyzx, r19.xyzx
      add r21.xyz, r21.xyzx, r21.xyzx
    else 
      mul r19.xyz, r20.xyzx, r19.xyzx
      mul r21.xyz, r6.xyzx, r19.xyzx
    endif 
    mul r19.xyz, r20.xyzx, l(16.000000, 16.000000, 16.000000, 0.000000)
    mul r20.xyz, r21.xyzx, l(16.000000, 16.000000, 16.000000, 0.000000)
  else 
    mov r19.xyz, l(0,0,0,0)
    mov r20.xyz, l(0,0,0,0)
  endif 
  if_nz cb5[8].z
    mov r8.xyz, r18.xyzx
    add r18.xyzw, r8.xyzw, -v6.xyzw
    dp4 r5.y, r18.xyzw, r18.xyzw
    sqrt r5.y, r5.y
    div r5.y, l(1.000000, 1.000000, 1.000000, 1.000000), r5.y
    mul r5.y, r5.y, l(10.000000)
    mul r6.w, r5.y, r14.z
    mul r8.xyz, r6.wwww, cb5[2].xyzx
    mul r8.xyz, r11.xxxx, r8.xyzx
    if_nz r11.z
      mul r18.xyz, r8.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000)
      mul r19.xyz, r18.xyzx, r19.xyzx
      mul r20.xyz, r18.xyzx, r20.xyzx
    else 
      ld_indexable(buffer)(float,float,float,float) r18.xyz, r4.zzzz, t6.xyzw
      mul r4.z, r5.y, r14.y
      mul r21.xyz, r14.xxxx, r20.xyzx
      mul r21.xyz, r15.xxxx, r21.xyzx
      mad r8.xyz, r4.zzzz, r2.xyzx, r8.xyzx
      mul r21.xyz, r21.xyzx, cb5[3].zzzz
      mad r8.xyz, r21.xyzx, r5.yyyy, r8.xyzx
      mul r4.z, r5.y, r11.y
      mul r21.xyz, r20.xyzx, r4.zzzz
      mad r8.xyz, r21.xyzx, l(0.050000, 0.050000, 0.050000, 0.000000), r8.xyzx
      mul r8.xyz, r18.xyzx, r8.xyzx
      mul r19.xyz, r8.xyzx, r19.xyzx
      mul r20.xyz, r8.xyzx, r20.xyzx
    endif 
  endif 
  add r12.xyz, r12.xyzx, r19.xyzx
  add r16.xyz, r16.xyzx, r20.xyzx
  iadd r4.y, r4.y, l(1)
endloop 
imul null, r0.z, cb2[25].z, r0.w
ld_indexable(buffer)(uint,uint,uint,uint) r0.z, r0.zzzz, t11.yzxw
imad r3.xyzw, cb2[25].zzzz, r0.wwww, l(1, 4, 2, 3)
ld_indexable(buffer)(uint,uint,uint,uint) r0.w, r3.xxxx, t11.yzwx
ishl r0.z, r0.z, l(16)
or r0.z, r0.w, r0.z
lt r0.z, r4.w, r0.z
iadd r0.w, r3.y, cb2[25].y
movc r0.w, r0.z, r3.y, r0.w
ld_indexable(buffer)(uint,uint,uint,uint) r1.w, r3.zzzz, t11.yzwx
ld_indexable(buffer)(uint,uint,uint,uint) r3.x, r3.wwww, t11.xyzw
movc r0.z, r0.z, r1.w, r3.x
iadd r0.z, r0.w, r0.z
mov r3.w, l(1.000000)
mov r4.xyz, r12.xyzx
mov r1.w, r0.w
loop 
  uge r4.w, r1.w, r0.z
  breakc_nz r4.w
  ld_indexable(buffer)(uint,uint,uint,uint) r4.w, r1.wwww, t11.yzwx
  ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r6.xyzw, r4.w, l(0), t9.xyzw
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r8.xyz, r4.w, l(0), t10.xyzx
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r9.xyz, r4.w, l(16), t10.xyzx
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r10.xyz, r4.w, l(32), t10.xyzx
  add r6.xyz, -r1.xyzx, r6.xyzx
  dp3 r5.y, r6.xyzx, r6.xyzx
  rsq r7.w, r5.y
  mul r6.xyz, r6.xyzx, r7.wwww
  sqrt r5.y, r5.y
  dp3 r7.w, r8.xyzx, -r6.xyzx
  max r7.w, r7.w, l(0.000000)
  lt r8.x, r5.y, r6.w
  lt r8.y, l(0.000000), r7.w
  and r8.x, r8.y, r8.x
  div r5.y, r5.y, r6.w
  add r5.y, r5.y, l(-1.000000)
  mov_sat r5.y, -r5.y
  mad r6.w, r5.y, l(-2.000000), l(3.000000)
  mul r5.y, r5.y, r5.y
  mul r5.y, r5.y, r6.w
  dp3 r6.w, r10.xyzx, r5.xzwx
  lt r8.y, r6.w, l(0.000000)
  div r6.w, r6.w, cb2[26].w
  add r6.w, r6.w, l(1.000000)
  movc r6.w, r8.y, r6.w, l(1.000000)
  dp3_sat r6.x, r6.xyzx, r5.xzwx
  mul r6.xyz, r6.xxxx, r9.xyzx
  mul r6.xyz, r5.yyyy, r6.xyzx
  mul r6.xyz, r7.wwww, r6.xyzx
  mul r6.xyz, r6.wwww, r6.xyzx
  and r6.xyz, r6.xyzx, r8.xxxx
  if_nz cb5[8].z
    ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r3.xyz, r4.w, l(0), t9.xyzx
    add r8.xyzw, r3.xyzw, -v6.xyzw
    dp4 r3.x, r8.xyzw, r8.xyzw
    sqrt r3.x, r3.x
    div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
    mul r3.x, r3.x, l(10.000000)
    mul r3.y, r3.x, r14.z
    mul r8.xyz, r3.yyyy, cb5[2].xyzx
    mul r8.xyz, r11.xxxx, r8.xyzx
    if_nz r11.z
      mul r10.xyz, r6.xyzx, r8.xyzx
      mul r6.xyz, r10.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000)
    else 
      mul r3.x, r3.x, r14.y
      mad r3.xyz, r3.xxxx, r2.xyzx, r8.xyzx
      mul r3.xyz, r9.xyzx, r3.xyzx
      mul r6.xyz, r3.xyzx, r6.xyzx
    endif 
  endif 
  add r4.xyz, r4.xyzx, r6.xyzx
  iadd r1.w, r1.w, l(1)
endloop 
mul r1.xyz, r2.wwww, r16.xyzx
if_nz cb5[4].y
  if_nz cb5[7].y
    mov r3.xyz, r7.xyzx
  else 
    if_nz cb5[5].y
      add_sat r6.xyz, -r7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul r3.xyz, r2.xyzx, r6.xyzx
    else 
      sample_indexable(texture2d)(float,float,float,float) r6.xyz, r0.xyxx, t16.xyzw, s0
      add_sat r8.xyz, -r7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul r3.xyz, r6.xyzx, r8.xyzx
    endif 
  endif 
else 
  mov r3.xyz, l(0,0,0,0)
endif 
mul r3.xyz, r3.xyzx, l(0.750000, 0.750000, 0.750000, 0.000000)
mad r3.xyz, r4.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r3.xyzx
add r3.xyz, r7.xyzx, r3.xyzx
mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r3.xyzx
mul r1.xyz, r1.xyzx, r2.xyzx
movc r1.xyz, cb5[7].xxxx, r1.xyzx, r2.xyzx
mov r1.w, l(1.000000)
if_nz cb5[7].w
  add r0.z, r13.w, r13.w
  mad r0.zw, r5.xxxz, -r0.zzzz, r13.yyyz
  mad r2.x, -r13.w, r13.w, l(1.000000)
  mad r2.x, -r2.x, l(0.980100), l(1.000000)
  sqrt r2.y, r2.x
  mad r2.y, r13.w, l(0.990000), r2.y
  ge r2.x, r2.x, l(0.000000)
  mul r2.yz, r5.xxzx, r2.yyyy
  mad r2.yz, r13.yyzy, l(0.000000, 0.990000, 0.990000, 0.000000), -r2.yyzy
  and r2.xy, r2.yzyy, r2.xxxx
  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r2.xyxx, t19.xyzw, s0
  sample_indexable(texture2d)(float,float,float,float) r3.xyzw, r0.zwzz, t19.xyzw, s0
  if_nz cb5[8].w
    sample_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t19.wxyz, s0
    add r4.xyzw, -r2.xyzw, r3.xyzw
    mad r4.xyzw, r4.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000), r2.xyzw
    div r4.xyzw, r4.xyzw, cb5[2].wwww
    mul r0.xyzw, r0.xxxx, r4.xyzw
    dp3 r4.x, r1.xyzx, r1.xyzx
    mad r1.xyzw, r0.xyzw, r4.xxxx, r1.xyzw
  else 
    add r0.xyzw, -r2.xyzw, r3.xyzw
    mad r0.xyzw, r0.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000), r2.xyzw
    div r0.xyzw, r0.xyzw, cb5[2].wwww
    dp3 r2.x, r1.xyzx, r1.xyzx
    mad r1.xyzw, r0.xyzw, r2.xxxx, r1.xyzw
  endif 
endif 
mul r0.xyzw, r1.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
movc r0.xyzw, cb6[6].yyyy, r0.xyzw, r1.xyzw
lt r1.x, r14.w, cb6[0].w
movc r1.xyz, r1.xxxx, cb6[0].xyzx, r0.xyzx
movc r1.xyz, cb6[6].wwww, r1.xyzx, r0.xyzx
sqrt r1.w, r12.w
div r1.w, r1.w, cb6[1].w
add r2.xyz, r1.wwww, r1.xyzx
movc r0.xyz, cb6[7].zzzz, r2.xyzx, r1.xyzx
dp4 r1.x, r0.xyzw, cb6[2].xyzw
dp4 r1.y, r0.xyzw, cb6[3].xyzw
dp4 r1.z, r0.xyzw, cb6[4].xyzw
dp4 r1.w, r0.xyzw, cb6[5].xyzw
movc o0.xyzw, cb6[6].xxxx, r1.xyzw, r0.xyzw
ret 
// Approximately 723 instruction slots used
